// <auto-generated />
using System;
using ClinicalLink.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicalLink.Infrastructure.Migrations
{
    [DbContext(typeof(SqlContext))]
    partial class SqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entidades.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataConsulta")
                        .HasColumnType("integer")
                        .HasColumnName("DATA_CONSULTA");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("PsiquiatraResponsavelId")
                        .HasColumnType("integer")
                        .HasColumnName("ESPECIALISTA_AVALIADO");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO_AVALIACAO");

                    b.HasKey("Id");

                    b.HasIndex("PsiquiatraResponsavelId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AGENDAMENTOS");
                });

            modelBuilder.Entity("Domain.Entidades.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("EspecialistaAvaliadoId")
                        .HasColumnType("integer")
                        .HasColumnName("ESPECIALISTA_AVALIADO");

                    b.Property<int>("Estrelas")
                        .HasColumnType("integer")
                        .HasColumnName("ESTRELAS");

                    b.Property<int>("UsuarioAvaliacaoId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO_AVALIACAO");

                    b.HasKey("Id");

                    b.HasIndex("EspecialistaAvaliadoId");

                    b.HasIndex("UsuarioAvaliacaoId");

                    b.ToTable("AVALIACAO_ESPECIALISTA");
                });

            modelBuilder.Entity("Domain.Entidades.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DATA_CONSULTA");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("EspecialistaId")
                        .HasColumnType("integer")
                        .HasColumnName("ESPECIALISTA");

                    b.Property<int>("StatusConsultaId")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS_CONSULTA");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("EspecialistaId");

                    b.HasIndex("StatusConsultaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CONSULTAS");
                });

            modelBuilder.Entity("Domain.Entidades.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRICAO");

                    b.HasKey("Id");

                    b.ToTable("ESPECIALIDADES");
                });

            modelBuilder.Entity("Domain.Entidades.Especialista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("ID_ESPECIALIDADE");

                    b.Property<int>("UsuarioEspecialistaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("UsuarioEspecialistaId");

                    b.ToTable("ESPECIALISTAS");
                });

            modelBuilder.Entity("Domain.Entidades.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgenciaDestino")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AGENCIA_DESTINO");

                    b.Property<string>("AgenciaOrigem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AGENCIA_ORIGEM");

                    b.Property<string>("ContaDestino")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CONTA_DESTINO");

                    b.Property<string>("ContaOrigem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CONTA_ORIGEM");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DATA_PAGAMENTO");

                    b.Property<string>("IdTransacao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ID_TRANSACAO");

                    b.Property<string>("InstituicaoDestino")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("INSTITUICAO_DESTINO");

                    b.Property<string>("InstituicaoOrigem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("INSTITUICAO_ORIGEM");

                    b.Property<string>("NomeDestino")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NOME_DESTINO");

                    b.Property<string>("NomeOrigem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NOME_ORIGEM");

                    b.Property<string>("TipoPagamento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TIPO_PAGAMENTO");

                    b.Property<string>("TipoTransferencia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TIPO_TRANSFERENCIA");

                    b.Property<int>("UsuarioDestinoId")
                        .HasColumnType("integer")
                        .HasColumnName("ESPECIALISTA_DESTINO");

                    b.Property<int>("UsuarioOrigemId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO_ORIGEM");

                    b.Property<float>("Valor")
                        .HasColumnType("real")
                        .HasColumnName("VALOR");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioDestinoId");

                    b.HasIndex("UsuarioOrigemId");

                    b.ToTable("PAGAMENTOS");
                });

            modelBuilder.Entity("Domain.Entidades.StatusConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("STATUS");

                    b.HasKey("Id");

                    b.ToTable("STATUS_CONSULTA");
                });

            modelBuilder.Entity("Domain.Entidades.Supervisao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("UsuarioSupervisaoId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO");

                    b.Property<int>("UsuarioSupervisorId")
                        .HasColumnType("integer")
                        .HasColumnName("USUARIO_SUPERVISOR");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioSupervisaoId");

                    b.HasIndex("UsuarioSupervisorId");

                    b.ToTable("SUPERVISAO");
                });

            modelBuilder.Entity("Domain.Entidades.TipoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TIPO");

                    b.HasKey("Id");

                    b.ToTable("TIPO_USUARIOS_SISTEMA");
                });

            modelBuilder.Entity("Domain.Entidades.Universidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CEP");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NOME");

                    b.HasKey("Id");

                    b.ToTable("UNIVERSIDADES");
                });

            modelBuilder.Entity("Domain.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CEP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NOME");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FONE");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SENHA");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SEXO");

                    b.Property<int?>("SupervisaoId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoUsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("TIPO_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("SupervisaoId");

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("USUARIOS_SISTEMA");
                });

            modelBuilder.Entity("Domain.Entidades.Agendamento", b =>
                {
                    b.HasOne("Domain.Entidades.Usuario", "PsiquiatraResponsavel")
                        .WithMany()
                        .HasForeignKey("PsiquiatraResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PsiquiatraResponsavel");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entidades.Avaliacao", b =>
                {
                    b.HasOne("Domain.Entidades.Especialista", "EspecialistaAvaliado")
                        .WithMany()
                        .HasForeignKey("EspecialistaAvaliadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "UsuarioAvaliacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EspecialistaAvaliado");

                    b.Navigation("UsuarioAvaliacao");
                });

            modelBuilder.Entity("Domain.Entidades.Consulta", b =>
                {
                    b.HasOne("Domain.Entidades.Usuario", "Especialista")
                        .WithMany()
                        .HasForeignKey("EspecialistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.StatusConsulta", "StatusConsulta")
                        .WithMany()
                        .HasForeignKey("StatusConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "UsuarioConsulta")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialista");

                    b.Navigation("StatusConsulta");

                    b.Navigation("UsuarioConsulta");
                });

            modelBuilder.Entity("Domain.Entidades.Especialista", b =>
                {
                    b.HasOne("Domain.Entidades.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "UsuarioEspecialista")
                        .WithMany()
                        .HasForeignKey("UsuarioEspecialistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("UsuarioEspecialista");
                });

            modelBuilder.Entity("Domain.Entidades.Pagamento", b =>
                {
                    b.HasOne("Domain.Entidades.Usuario", "UsuarioDestino")
                        .WithMany()
                        .HasForeignKey("UsuarioDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "UsuarioOrigem")
                        .WithMany()
                        .HasForeignKey("UsuarioOrigemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioDestino");

                    b.Navigation("UsuarioOrigem");
                });

            modelBuilder.Entity("Domain.Entidades.Supervisao", b =>
                {
                    b.HasOne("Domain.Entidades.Usuario", "UsuarioSupervisao")
                        .WithMany()
                        .HasForeignKey("UsuarioSupervisaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidades.Usuario", "UsuarioSupervisor")
                        .WithMany()
                        .HasForeignKey("UsuarioSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioSupervisao");

                    b.Navigation("UsuarioSupervisor");
                });

            modelBuilder.Entity("Domain.Entidades.Usuario", b =>
                {
                    b.HasOne("Domain.Entidades.Supervisao", null)
                        .WithMany("Subordinados")
                        .HasForeignKey("SupervisaoId");

                    b.HasOne("Domain.Entidades.TipoUsuario", "TipoUsuario")
                        .WithMany()
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("Domain.Entidades.Supervisao", b =>
                {
                    b.Navigation("Subordinados");
                });
#pragma warning restore 612, 618
        }
    }
}
